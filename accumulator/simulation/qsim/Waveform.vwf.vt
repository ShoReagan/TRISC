// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2022 12:05:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          accumulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module accumulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg S;
reg clear;
reg increment;
reg load;
// wires                                               
wire [3:0] Z;

// assign statements (if any)                          
accumulator i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.S(S),
	.Z(Z),
	.clear(clear),
	.increment(increment),
	.load(load)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #160000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #320000 1'b1;
	A[2] = #160000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #800000 1'b1;
	B[2] = #80000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #480000 1'b1;
	B[1] = #160000 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #160000 1'b1;
	B[0] = #160000 1'b0;
end 

// S
initial
begin
	S = 1'b0;
	S = #160000 1'b1;
	S = #160000 1'b0;
	S = #100000 1'b1;
	S = #160000 1'b0;
	S = #220000 1'b1;
	S = #80000 1'b0;
end 

// clear
initial
begin
	clear = 1'b1;
	clear = #80000 1'b0;
	clear = #80000 1'b1;
	clear = #80000 1'b0;
	clear = #40000 1'b1;
	clear = #400000 1'b0;
	clear = #100000 1'b1;
end 

// increment
initial
begin
	repeat(12)
	begin
		increment = 1'b0;
		increment = #40000 1'b1;
		# 40000;
	end
	increment = 1'b0;
end 

// load
initial
begin
	load = 1'b0;
	load = #20000 1'b1;
	load = #60000 1'b0;
	load = #220000 1'b1;
	load = #40000 1'b0;
	load = #480000 1'b1;
	load = #40000 1'b0;
end 
endmodule

