// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 20.1 (Build Build 720 11/11/2020)
// Created on Fri Apr 29 11:05:18 2022

trisc2 trisc2_inst
(
	.Mode(Mode_sig) ,	// input  Mode_sig
	.ClockIn(ClockIn_sig) ,	// input  ClockIn_sig
	.ClearAddGen(ClearAddGen_sig) ,	// input  ClearAddGen_sig
	.RW(RW_sig) ,	// input  RW_sig
	.DataIn(DataIn_sig) ,	// input [7:0] DataIn_sig
	.startStop(startStop_sig) ,	// input  startStop_sig
	.clock(clock_sig) ,	// input  clock_sig
	.PChex(PChex_sig) ,	// output [6:0] PChex_sig
	.MARhex(MARhex_sig) ,	// output [6:0] MARhex_sig
	.MDout(MDout_sig) ,	// output [13:0] MDout_sig
	.MDin(MDin_sig) ,	// output [13:0] MDin_sig
	.c0(c0_sig) ,	// output  c0_sig
	.c1(c1_sig) ,	// output  c1_sig
	.c2(c2_sig) ,	// output  c2_sig
	.c3(c3_sig) ,	// output  c3_sig
	.c4(c4_sig) ,	// output  c4_sig
	.c5(c5_sig) ,	// output  c5_sig
	.c7(c7_sig) ,	// output  c7_sig
	.c8(c8_sig) ,	// output  c8_sig
	.c9(c9_sig) ,	// output  c9_sig
	.c10(c10_sig) ,	// output  c10_sig
	.c11(c11_sig) ,	// output  c11_sig
	.c12(c12_sig) ,	// output  c12_sig
	.c13(c13_sig) ,	// output  c13_sig
	.c14(c14_sig) 	// output  c14_sig
);

